{"version":3,"file":"ngx-webcam.umd.js.map","sources":["ng://ngx-webcam/src/app/modules/webcam/domain/webcam-image.ts","ng://ngx-webcam/src/app/modules/webcam/util/webcam.util.ts","ng://ngx-webcam/src/app/modules/webcam/webcam/webcam.component.ts","ng://ngx-webcam/src/app/modules/webcam/webcam.module.ts","ng://ngx-webcam/src/app/modules/webcam/domain/webcam-init-error.ts","ng://ngx-webcam/src/app/modules/webcam/domain/webcam-mirror-properties.ts"],"sourcesContent":["/**\r\n * Container class for a captured webcam image\r\n * @author basst314, davidshen84\r\n */\r\nexport class WebcamImage {\r\n\r\n  public constructor(imageAsDataUrl: string, mimeType: string, imageData: ImageData) {\r\n    this._mimeType = mimeType;\r\n    this._imageAsDataUrl = imageAsDataUrl;\r\n    this._imageData = imageData;\r\n  }\r\n\r\n  private readonly _mimeType: string = null;\r\n  private _imageAsBase64: string = null;\r\n  private readonly _imageAsDataUrl: string = null;\r\n  private readonly _imageData: ImageData = null;\r\n\r\n\r\n  /**\r\n   * Extracts the Base64 data out of the given dataUrl.\r\n   * @param dataUrl the given dataUrl\r\n   * @param mimeType the mimeType of the data\r\n   */\r\n  private static getDataFromDataUrl(dataUrl: string, mimeType: string) {\r\n    return dataUrl.replace(`data:${mimeType};base64,`, '');\r\n  }\r\n\r\n  /**\r\n   * Get the base64 encoded image data\r\n   * @returns base64 data of the image\r\n   */\r\n  public get imageAsBase64(): string {\r\n    return this._imageAsBase64 ? this._imageAsBase64\r\n      : this._imageAsBase64 = WebcamImage.getDataFromDataUrl(this._imageAsDataUrl, this._mimeType);\r\n  }\r\n\r\n  /**\r\n   * Get the encoded image as dataUrl\r\n   * @returns the dataUrl of the image\r\n   */\r\n  public get imageAsDataUrl(): string {\r\n    return this._imageAsDataUrl;\r\n  }\r\n\r\n  /**\r\n   * Get the ImageData object associated with the canvas' 2d context.\r\n   * @returns the ImageData of the canvas's 2d context.\r\n   */\r\n  public get imageData(): ImageData {\r\n    return this._imageData;\r\n  }\r\n\r\n}\r\n","export class WebcamUtil {\r\n\r\n  /**\r\n   * Lists available videoInput devices\r\n   * @returns a list of media device info.\r\n   */\r\n  public static getAvailableVideoInputs(): Promise<MediaDeviceInfo[]> {\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n      return Promise.reject('enumerateDevices() not supported.');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          resolve(devices.filter((device: MediaDeviceInfo) => device.kind === 'videoinput'));\r\n        })\r\n        .catch(err => {\r\n          reject(err.message || err);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\r\nimport {WebcamInitError} from '../domain/webcam-init-error';\r\nimport {WebcamImage} from '../domain/webcam-image';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {WebcamUtil} from '../util/webcam.util';\r\nimport {WebcamMirrorProperties} from '../domain/webcam-mirror-properties';\r\n\r\n@Component({\r\n  selector: 'webcam',\r\n  templateUrl: './webcam.component.html',\r\n  styleUrls: ['./webcam.component.scss']\r\n})\r\nexport class WebcamComponent implements AfterViewInit, OnDestroy {\r\n  private static DEFAULT_VIDEO_OPTIONS: MediaTrackConstraints = {facingMode: 'environment'};\r\n  private static DEFAULT_IMAGE_TYPE: string = 'image/jpeg';\r\n  private static DEFAULT_IMAGE_QUALITY: number = 0.92;\r\n\r\n  /** Defines the max width of the webcam area in px */\r\n  @Input() public width: number = 640;\r\n  /** Defines the max height of the webcam area in px */\r\n  @Input() public height: number = 480;\r\n  /** Defines base constraints to apply when requesting video track from UserMedia */\r\n  @Input() public videoOptions: MediaTrackConstraints = WebcamComponent.DEFAULT_VIDEO_OPTIONS;\r\n  /** Flag to enable/disable camera switch. If enabled, a switch icon will be displayed if multiple cameras were found */\r\n  @Input() public allowCameraSwitch: boolean = true;\r\n  /** Parameter to control image mirroring (i.e. for user-facing camera). [\"auto\", \"always\", \"never\"] */\r\n  @Input() public mirrorImage: string | WebcamMirrorProperties;\r\n  /** Flag to control whether an ImageData object is stored into the WebcamImage object. */\r\n  @Input() public captureImageData: boolean = false;\r\n  /** The image type to use when capturing snapshots */\r\n  @Input() public imageType: string = WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n  /** The image quality to use when capturing snapshots (number between 0 and 1) */\r\n  @Input() public imageQuality: number = WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n\r\n  /** EventEmitter which fires when an image has been captured */\r\n  @Output() public imageCapture: EventEmitter<WebcamImage> = new EventEmitter<WebcamImage>();\r\n  /** Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions) */\r\n  @Output() public initError: EventEmitter<WebcamInitError> = new EventEmitter<WebcamInitError>();\r\n  /** Emits when the webcam video was clicked */\r\n  @Output() public imageClick: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Emits the active deviceId after the active video device was switched */\r\n  @Output() public cameraSwitched: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  /** available video devices */\r\n  public availableVideoInputs: MediaDeviceInfo[] = [];\r\n\r\n  /** Indicates whether the video device is ready to be switched */\r\n  public videoInitialized: boolean = false;\r\n\r\n  /** If the Observable represented by this subscription emits, an image will be captured and emitted through\r\n   * the 'imageCapture' EventEmitter */\r\n  private triggerSubscription: Subscription;\r\n  /** Index of active video in availableVideoInputs */\r\n  private activeVideoInputIndex: number = -1;\r\n  /** Subscription to switchCamera events */\r\n  private switchCameraSubscription: Subscription;\r\n  /** MediaStream object in use for streaming UserMedia data */\r\n  private mediaStream: MediaStream = null;\r\n  @ViewChild('video') private video: any;\r\n  /** Canvas for Video Snapshots */\r\n  @ViewChild('canvas') private canvas: any;\r\n\r\n  /** width and height of the active video stream */\r\n  private activeVideoSettings: MediaTrackSettings = null;\r\n\r\n  /**\r\n   * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\r\n   */\r\n  @Input()\r\n  public set trigger(trigger: Observable<void>) {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to take snapshots\r\n    this.triggerSubscription = trigger.subscribe(() => {\r\n      this.takeSnapshot();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If the given Observable emits, the active webcam will be switched to the one indicated by the emitted value.\r\n   * @param switchCamera Indicates which webcam to switch to\r\n   *   true: cycle forwards through available webcams\r\n   *   false: cycle backwards through available webcams\r\n   *   string: activate the webcam with the given id\r\n   */\r\n  @Input()\r\n  public set switchCamera(switchCamera: Observable<boolean | string>) {\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to switch video device\r\n    this.switchCameraSubscription = switchCamera.subscribe((value: boolean | string) => {\r\n      if (typeof value === 'string') {\r\n        // deviceId was specified\r\n        this.switchToVideoInput(value);\r\n      } else {\r\n        // direction was specified\r\n        this.rotateVideoInput(value !== false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get MediaTrackConstraints to request streaming the given device\r\n   * @param deviceId\r\n   * @param baseMediaTrackConstraints base constraints to merge deviceId-constraint into\r\n   * @returns\r\n   */\r\n  private static getMediaConstraintsForDevice(deviceId: string, baseMediaTrackConstraints: MediaTrackConstraints): MediaTrackConstraints {\r\n    const result: MediaTrackConstraints = baseMediaTrackConstraints ? baseMediaTrackConstraints : this.DEFAULT_VIDEO_OPTIONS;\r\n    if (deviceId) {\r\n      result.deviceId = {exact: deviceId};\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the deviceId from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the id.\r\n   * @param mediaStreamTrack\r\n   * @returns deviceId if found in the mediaStreamTrack\r\n   */\r\n  private static getDeviceIdFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().deviceId) {\r\n      return mediaStreamTrack.getSettings().deviceId;\r\n    } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().deviceId) {\r\n      const deviceIdObj: ConstrainDOMString = mediaStreamTrack.getConstraints().deviceId;\r\n      return WebcamComponent.getValueFromConstrainDOMString(deviceIdObj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the facingMode from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the value.\r\n   * @param mediaStreamTrack\r\n   * @returns facingMode if found in the mediaStreamTrack\r\n   */\r\n  private static getFacingModeFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack) {\r\n      if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().facingMode) {\r\n        return mediaStreamTrack.getSettings().facingMode;\r\n      } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().facingMode) {\r\n        const facingModeConstraint: ConstrainDOMString = mediaStreamTrack.getConstraints().facingMode;\r\n        return WebcamComponent.getValueFromConstrainDOMString(facingModeConstraint);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the given mediaStreamTrack claims itself as user facing\r\n   * @param mediaStreamTrack\r\n   */\r\n  private static isUserFacing(mediaStreamTrack: MediaStreamTrack): boolean {\r\n    const facingMode: string = WebcamComponent.getFacingModeFromMediaStreamTrack(mediaStreamTrack);\r\n    return facingMode ? 'user' === facingMode.toLowerCase() : false;\r\n  }\r\n\r\n  /**\r\n   * Extracts the value from the given ConstrainDOMString\r\n   * @param constrainDOMString\r\n   */\r\n  private static getValueFromConstrainDOMString(constrainDOMString: ConstrainDOMString): string {\r\n    if (constrainDOMString) {\r\n      if (constrainDOMString instanceof String) {\r\n        return String(constrainDOMString);\r\n      } else if (Array.isArray(constrainDOMString) && Array(constrainDOMString).length > 0) {\r\n        return String(constrainDOMString[0]);\r\n      } else if (typeof constrainDOMString === 'object') {\r\n        if (constrainDOMString['exact']) {\r\n          return String(constrainDOMString['exact']);\r\n        } else if (constrainDOMString['ideal']) {\r\n          return String(constrainDOMString['ideal']);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.detectAvailableDevices()\r\n      .then((devices: MediaDeviceInfo[]) => {\r\n        // start first device\r\n        this.switchToVideoInput(devices.length > 0 ? devices[0].deviceId : null);\r\n      })\r\n      .catch((err: string) => {\r\n        this.initError.next(<WebcamInitError>{message: err});\r\n        // fallback: still try to load webcam, even if device enumeration failed\r\n        this.switchToVideoInput(null);\r\n      });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.stopMediaTracks();\r\n    this.unsubscribeFromSubscriptions();\r\n  }\r\n\r\n  /**\r\n   * Takes a snapshot of the current webcam's view and emits the image as an event\r\n   */\r\n  public takeSnapshot(): void {\r\n    // set canvas size to actual video size\r\n    const _video = this.video.nativeElement;\r\n    const dimensions = {width: this.width, height: this.height};\r\n    if (_video.videoWidth) {\r\n      dimensions.width = _video.videoWidth;\r\n      dimensions.height = _video.videoHeight;\r\n    }\r\n\r\n    const _canvas = this.canvas.nativeElement;\r\n    _canvas.width = dimensions.width;\r\n    _canvas.height = dimensions.height;\r\n\r\n    // paint snapshot image to canvas\r\n    const context2d = _canvas.getContext('2d');\r\n    context2d.drawImage(this.video.nativeElement, 0, 0);\r\n\r\n    // read canvas content as image\r\n    const mimeType: string = this.imageType ? this.imageType : WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n    const quality: number = this.imageQuality ? this.imageQuality : WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n    const dataUrl: string = _canvas.toDataURL(mimeType, quality);\r\n\r\n    // get the ImageData object from the canvas' context.\r\n    let imageData: ImageData = null;\r\n\r\n    if (this.captureImageData) {\r\n      imageData = context2d.getImageData(0, 0, _canvas.width, _canvas.height);\r\n    }\r\n\r\n    this.imageCapture.next(new WebcamImage(dataUrl, mimeType, imageData));\r\n  }\r\n\r\n  /**\r\n   * Switches to the next/previous video device\r\n   * @param forward\r\n   */\r\n  public rotateVideoInput(forward: boolean) {\r\n    if (this.availableVideoInputs && this.availableVideoInputs.length > 1) {\r\n      const increment: number = forward ? 1 : (this.availableVideoInputs.length - 1);\r\n      const nextInputIndex = (this.activeVideoInputIndex + increment) % this.availableVideoInputs.length;\r\n      this.switchToVideoInput(this.availableVideoInputs[nextInputIndex].deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switches the camera-view to the specified video device\r\n   */\r\n  public switchToVideoInput(deviceId: string): void {\r\n    this.videoInitialized = false;\r\n    this.stopMediaTracks();\r\n    this.initWebcam(deviceId, this.videoOptions);\r\n  }\r\n\r\n\r\n  /**\r\n   * Event-handler for video resize event.\r\n   * Triggers Angular change detection so that new video dimensions get applied\r\n   */\r\n  public videoResize(): void {\r\n    // here to trigger Angular change detection\r\n  }\r\n\r\n  public get videoWidth() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.width, this.height * videoRatio);\r\n  }\r\n\r\n  public get videoHeight() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.height, this.width / videoRatio);\r\n  }\r\n\r\n  public get videoStyleClasses() {\r\n    let classes: string = '';\r\n\r\n    if (this.isMirrorImage()) {\r\n      classes += 'mirrored ';\r\n    }\r\n\r\n    return classes.trim();\r\n  }\r\n\r\n  /**\r\n   * Returns the video aspect ratio of the active video stream\r\n   */\r\n  private getVideoAspectRatio(): number {\r\n    // calculate ratio from video element dimensions if present\r\n    const videoElement = this.video.nativeElement;\r\n    if (videoElement.videoWidth && videoElement.videoWidth > 0 &&\r\n      videoElement.videoHeight && videoElement.videoHeight > 0) {\r\n\r\n      return videoElement.videoWidth / videoElement.videoHeight;\r\n    }\r\n\r\n    // nothing present - calculate ratio based on width/height params\r\n    return this.width / this.height;\r\n  }\r\n\r\n  /**\r\n   * Init webcam live view\r\n   */\r\n  private initWebcam(deviceId: string, userVideoTrackConstraints: MediaTrackConstraints) {\r\n    const _video = this.video.nativeElement;\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\r\n      // merge deviceId -> userVideoTrackConstraints\r\n      const videoTrackConstraints = WebcamComponent.getMediaConstraintsForDevice(deviceId, userVideoTrackConstraints);\r\n\r\n      navigator.mediaDevices.getUserMedia(<MediaStreamConstraints>{video: videoTrackConstraints})\r\n        .then((stream: MediaStream) => {\r\n          this.mediaStream = stream;\r\n          _video.srcObject = stream;\r\n          _video.play();\r\n\r\n          this.activeVideoSettings = stream.getVideoTracks()[0].getSettings();\r\n          const activeDeviceId: string = WebcamComponent.getDeviceIdFromMediaStreamTrack(stream.getVideoTracks()[0]);\r\n          this.activeVideoInputIndex = activeDeviceId ? this.availableVideoInputs\r\n            .findIndex((mediaDeviceInfo: MediaDeviceInfo) => mediaDeviceInfo.deviceId === activeDeviceId) : -1;\r\n          this.videoInitialized = true;\r\n\r\n          this.cameraSwitched.next(activeDeviceId);\r\n        })\r\n        .catch((err: MediaStreamError) => {\r\n          this.initError.next(<WebcamInitError>{message: err.message, mediaStreamError: err});\r\n        });\r\n    } else {\r\n      this.initError.next(<WebcamInitError>{message: 'Cannot read UserMedia from MediaDevices.'});\r\n    }\r\n  }\r\n\r\n  private getActiveVideoTrack(): MediaStreamTrack {\r\n    return this.mediaStream ? this.mediaStream.getVideoTracks()[0] : null;\r\n  }\r\n\r\n  private isMirrorImage(): boolean {\r\n    if (!this.getActiveVideoTrack()) {\r\n      return false;\r\n    }\r\n\r\n    // check for explicit mirror override parameter\r\n    {\r\n      let mirror: string = 'auto';\r\n      if (this.mirrorImage) {\r\n        if (typeof this.mirrorImage === 'string') {\r\n          mirror = String(this.mirrorImage).toLowerCase();\r\n        } else {\r\n          // WebcamMirrorProperties\r\n          if (this.mirrorImage.x) {\r\n            mirror = this.mirrorImage.x.toLowerCase();\r\n          }\r\n        }\r\n      }\r\n\r\n      switch (mirror) {\r\n        case 'always':\r\n          return true;\r\n        case 'never':\r\n          return false;\r\n      }\r\n    }\r\n\r\n    // default: enable mirroring if webcam is user facing\r\n    return WebcamComponent.isUserFacing(this.getActiveVideoTrack());\r\n  }\r\n\r\n  /**\r\n   * Stops all active media tracks.\r\n   * This prevents the webcam from being indicated as active,\r\n   * even if it is no longer used by this component.\r\n   */\r\n  private stopMediaTracks() {\r\n    if (this.mediaStream && this.mediaStream.getTracks) {\r\n      // getTracks() returns all media tracks (video+audio)\r\n      this.mediaStream.getTracks()\r\n        .forEach((track: MediaStreamTrack) => track.stop());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from all open subscriptions\r\n   */\r\n  private unsubscribeFromSubscriptions() {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reads available input devices\r\n   */\r\n  private detectAvailableDevices(): Promise<MediaDeviceInfo[]> {\r\n    return new Promise((resolve, reject) => {\r\n      WebcamUtil.getAvailableVideoInputs()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          this.availableVideoInputs = devices;\r\n          resolve(devices);\r\n        })\r\n        .catch(err => {\r\n          this.availableVideoInputs = [];\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WebcamComponent} from './webcam/webcam.component';\n\nconst COMPONENTS = [\n  WebcamComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    COMPONENTS\n  ],\n  exports: [\n    COMPONENTS\n  ]\n})\nexport class WebcamModule {\n}\n","export class WebcamInitError {\r\n  public message: string = null;\r\n  public mediaStreamError: MediaStreamError = null;\r\n}\r\n","export class WebcamMirrorProperties {\r\n  public x: string;  // [\"auto\", \"always\", \"never\"]\r\n}\r\n"],"names":["EventEmitter","Component","Input","Output","ViewChild","NgModule","CommonModule"],"mappings":"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"}
