/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Container class for a captured webcam image
 * @author basst314, davidshen84
 */
export class WebcamImage {
    /**
     * @param {?} imageAsDataUrl
     * @param {?} mimeType
     * @param {?} imageData
     */
    constructor(imageAsDataUrl, mimeType, imageData) {
        this._mimeType = null;
        this._imageAsBase64 = null;
        this._imageAsDataUrl = null;
        this._imageData = null;
        this._mimeType = mimeType;
        this._imageAsDataUrl = imageAsDataUrl;
        this._imageData = imageData;
    }
    /**
     * Extracts the Base64 data out of the given dataUrl.
     * @private
     * @param {?} dataUrl the given dataUrl
     * @param {?} mimeType the mimeType of the data
     * @return {?}
     */
    static getDataFromDataUrl(dataUrl, mimeType) {
        return dataUrl.replace(`data:${mimeType};base64,`, '');
    }
    /**
     * Get the base64 encoded image data
     * @return {?} base64 data of the image
     */
    get imageAsBase64() {
        return this._imageAsBase64 ? this._imageAsBase64
            : this._imageAsBase64 = WebcamImage.getDataFromDataUrl(this._imageAsDataUrl, this._mimeType);
    }
    /**
     * Get the encoded image as dataUrl
     * @return {?} the dataUrl of the image
     */
    get imageAsDataUrl() {
        return this._imageAsDataUrl;
    }
    /**
     * Get the ImageData object associated with the canvas' 2d context.
     * @return {?} the ImageData of the canvas's 2d context.
     */
    get imageData() {
        return this._imageData;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    WebcamImage.prototype._mimeType;
    /**
     * @type {?}
     * @private
     */
    WebcamImage.prototype._imageAsBase64;
    /**
     * @type {?}
     * @private
     */
    WebcamImage.prototype._imageAsDataUrl;
    /**
     * @type {?}
     * @private
     */
    WebcamImage.prototype._imageData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViY2FtLWltYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYmNhbS8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kdWxlcy93ZWJjYW0vZG9tYWluL3dlYmNhbS1pbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBLE1BQU0sT0FBTyxXQUFXOzs7Ozs7SUFFdEIsWUFBbUIsY0FBc0IsRUFBRSxRQUFnQixFQUFFLFNBQW9CO1FBTWhFLGNBQVMsR0FBVyxJQUFJLENBQUM7UUFDbEMsbUJBQWMsR0FBVyxJQUFJLENBQUM7UUFDckIsb0JBQWUsR0FBVyxJQUFJLENBQUM7UUFDL0IsZUFBVSxHQUFjLElBQUksQ0FBQztRQVI1QyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztRQUN0QyxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDOzs7Ozs7OztJQWFPLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFlLEVBQUUsUUFBZ0I7UUFDakUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsUUFBUSxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Ozs7SUFNRCxJQUFXLGFBQWE7UUFDdEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYztZQUM5QyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakcsQ0FBQzs7Ozs7SUFNRCxJQUFXLGNBQWM7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7Ozs7O0lBTUQsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0NBRUY7Ozs7OztJQXhDQyxnQ0FBMEM7Ozs7O0lBQzFDLHFDQUFzQzs7Ozs7SUFDdEMsc0NBQWdEOzs7OztJQUNoRCxpQ0FBOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29udGFpbmVyIGNsYXNzIGZvciBhIGNhcHR1cmVkIHdlYmNhbSBpbWFnZVxyXG4gKiBAYXV0aG9yIGJhc3N0MzE0LCBkYXZpZHNoZW44NFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdlYmNhbUltYWdlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGltYWdlQXNEYXRhVXJsOiBzdHJpbmcsIG1pbWVUeXBlOiBzdHJpbmcsIGltYWdlRGF0YTogSW1hZ2VEYXRhKSB7XHJcbiAgICB0aGlzLl9taW1lVHlwZSA9IG1pbWVUeXBlO1xyXG4gICAgdGhpcy5faW1hZ2VBc0RhdGFVcmwgPSBpbWFnZUFzRGF0YVVybDtcclxuICAgIHRoaXMuX2ltYWdlRGF0YSA9IGltYWdlRGF0YTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgX21pbWVUeXBlOiBzdHJpbmcgPSBudWxsO1xyXG4gIHByaXZhdGUgX2ltYWdlQXNCYXNlNjQ6IHN0cmluZyA9IG51bGw7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfaW1hZ2VBc0RhdGFVcmw6IHN0cmluZyA9IG51bGw7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBfaW1hZ2VEYXRhOiBJbWFnZURhdGEgPSBudWxsO1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogRXh0cmFjdHMgdGhlIEJhc2U2NCBkYXRhIG91dCBvZiB0aGUgZ2l2ZW4gZGF0YVVybC5cclxuICAgKiBAcGFyYW0gZGF0YVVybCB0aGUgZ2l2ZW4gZGF0YVVybFxyXG4gICAqIEBwYXJhbSBtaW1lVHlwZSB0aGUgbWltZVR5cGUgb2YgdGhlIGRhdGFcclxuICAgKi9cclxuICBwcml2YXRlIHN0YXRpYyBnZXREYXRhRnJvbURhdGFVcmwoZGF0YVVybDogc3RyaW5nLCBtaW1lVHlwZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gZGF0YVVybC5yZXBsYWNlKGBkYXRhOiR7bWltZVR5cGV9O2Jhc2U2NCxgLCAnJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIGJhc2U2NCBlbmNvZGVkIGltYWdlIGRhdGFcclxuICAgKiBAcmV0dXJucyBiYXNlNjQgZGF0YSBvZiB0aGUgaW1hZ2VcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGltYWdlQXNCYXNlNjQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9pbWFnZUFzQmFzZTY0ID8gdGhpcy5faW1hZ2VBc0Jhc2U2NFxyXG4gICAgICA6IHRoaXMuX2ltYWdlQXNCYXNlNjQgPSBXZWJjYW1JbWFnZS5nZXREYXRhRnJvbURhdGFVcmwodGhpcy5faW1hZ2VBc0RhdGFVcmwsIHRoaXMuX21pbWVUeXBlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgZW5jb2RlZCBpbWFnZSBhcyBkYXRhVXJsXHJcbiAgICogQHJldHVybnMgdGhlIGRhdGFVcmwgb2YgdGhlIGltYWdlXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBpbWFnZUFzRGF0YVVybCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ltYWdlQXNEYXRhVXJsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBJbWFnZURhdGEgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgY2FudmFzJyAyZCBjb250ZXh0LlxyXG4gICAqIEByZXR1cm5zIHRoZSBJbWFnZURhdGEgb2YgdGhlIGNhbnZhcydzIDJkIGNvbnRleHQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBpbWFnZURhdGEoKTogSW1hZ2VEYXRhIHtcclxuICAgIHJldHVybiB0aGlzLl9pbWFnZURhdGE7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=